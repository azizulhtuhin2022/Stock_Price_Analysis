# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yIaD1AbUntzGeGuJpoJNtqqduEhcj2Yi
"""



"""# **Import Libraries**"""

import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt

"""# **Download Stock Data**"""

# Define stock symbol and time period
stock_symbol = "AAPL"  # Apple stock
start_date = "2023-01-01"
end_date = "2024-01-01"

# Fetch data
stock_data = yf.download(stock_symbol, start=start_date, end=end_date)

# Display first 5 rows
print(stock_data.head())

"""## **Data Cleaning & Processing**"""

#Check for missng values

print(stock_data.isnull().sum())

#fill missing values using forward fill method

stock_data.fillna(method='ffill', inplace= True)

"""# **Plot Stock Closing Price**"""

plt.figure(figsize=(12, 6))
plt.plot(stock_data['Close'], label='Closing Price', color='blue')
plt.xlabel('Date')
plt.ylabel('Stock Price(USD)')
plt.title(f'{stock_symbol} Stock Closing Price')
plt.legend()
plt.show()

"""# **Calculate Moving Averages (SMA & EMA)**"""

# Define moving average window size
window = 20  # 20-day moving average

# Calculate SMA & EMA
stock_data['SMA'] = stock_data['Close'].rolling(window=window).mean()
stock_data['EMA'] = stock_data['Close'].ewm(span=window, adjust=False).mean()

# Plot Closing Price & Moving Averages
plt.figure(figsize=(12,6))
plt.plot(stock_data.index, stock_data['Close'], label="Closing Price", color='blue')
plt.plot(stock_data.index, stock_data['SMA'], label=f"{window}-Day SMA", color='red')
plt.plot(stock_data.index, stock_data['EMA'], label=f"{window}-Day EMA", color='green')
plt.xlabel("Date")
plt.ylabel("Stock Price (USD)")
plt.title(f"{stock_symbol} Stock Price with SMA & EMA")
plt.legend()
plt.show()

"""# **Compute Daily Returns**"""

# Compute daily returns
stock_data['Daily Return'] = stock_data['Close'].pct_change()

# Plot Daily Returns
plt.figure(figsize=(12,6))
plt.plot(stock_data.index, stock_data['Daily Return'], label="Daily Return", color='purple')
plt.xlabel("Date")
plt.ylabel("Daily Return (%)")
plt.title(f"{stock_symbol} Daily Return")
plt.legend()
plt.show()

"""# **Calculate Stock Volatility**"""

# Compute rolling standard deviation (volatility)
volatility_window = 20  # 20-day volatility
stock_data['Volatility'] = stock_data['Daily Return'].rolling(volatility_window).std()

# Plot Stock Volatility
plt.figure(figsize=(12,6))
plt.plot(stock_data.index, stock_data['Volatility'], label="Volatility", color='orange')
plt.xlabel("Date")
plt.ylabel("Volatility")
plt.title(f"{stock_symbol} Stock Volatility")
plt.legend()
plt.show()

"""# **Save Processed Data**


"""

# Save the cleaned dataset for future use
stock_data.to_csv(f"{stock_symbol}_Stock_Data.csv")
print("File Saved Successfully!")